// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// The User model represents a user in the system, with a unique Clerk user ID and email.
model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique //clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// The Account model represents a user's financial account, which can be of type CURRENT or SAVINGS.
model Account{
  id            String    @id @default(uuid())
  name          String
  type          AccountType
  balance       Float     @default(0)  // The current balance of the account
  isDefault     Boolean   @default(false)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([userId])
  @@map("accounts")
}

//account type can be either CURRENT or SAVINGS
enum AccountType {
  CURRENT
  SAVINGS
}

model Transaction {
  id            String    @id @default(uuid())
  type          TransactionType
  amount        Float
  description   String?
  date          DateTime
  category      String
  receiptUrl    String?
  isRecurring   Boolean   @default(false)
  recurringInterval RecurringInterval? // Optional field for recurring transactions
  nextRecurringDate DateTime? // Optional field for the next recurring date
  lastProcessed     DateTime? //last time this recurring transaction was processed

  status        TransactionStatus  @default(COMPLETED) // Status of the transaction
  userId        String
  user          User      @relation(fields: [userId], references: [id] , onDelete: Cascade) // Cascade delete if user is deleted
  accountId     String
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade) // Cascade delete if account is deleted
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}


// The Budget model represents a user's budget, which includes a name, amount, start date, and end date.
model Budget {
  id            String    @id @default(uuid())
  amount        Float     // The total budgeted amount
  lastAlertSent DateTime? // The last time an alert was sent for this budget
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete if user is deleted
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@map("budgets")
}